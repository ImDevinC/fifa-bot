package app_test

import (
	"context"
	"flag"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/imdevinc/fifa-bot/pkg/app"
	"github.com/imdevinc/fifa-bot/pkg/database"
	"github.com/imdevinc/fifa-bot/pkg/queue"
	go_fifa "github.com/imdevinc/go-fifa"
	"github.com/stretchr/testify/assert"
)

var liveTest bool

func init() {
	flag.BoolVar(&liveTest, "livetest", false, "run live tests (need dynamodb access)")
}
func TestGetEvents(t *testing.T) {
	s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		body, _ := io.ReadAll(r.Body)
		fmt.Println(string(body))
		w.Write([]byte(`"OK`))
	}))
	defer s.Close()

	item, err := attributevalue.MarshalMap(database.Match{
		Id: "400235456",
		Events: []string{
			"18186200000013",
			"18186200000014",
			"18186200000017",
			"18186200000020",
			"18186202500023",
			"18186200000024",
			"18186200000026",
			"18186202500038",
			"18186202500051",
			"18186200000075",
			"18186202500067",
			"18186202500070",
			"18186202500107",
			"18186200000156",
			"18186200000140",
			"18186200000141",
			"18186200000170",
			"18186200000181",
			"18186200000183",
			"18186200000187",
			"18186200000189",
			"18186200000204",
			"18186200000205",
			"18186200000207",
			"18186200000209",
			"18186200000213",
			"18186200000228",
			"18186200000284",
			"18186200000300",
			"18186200000330",
			"18186200000340",
			"18186200000370",
			"18186200000398",
			"18186200000408",
			"18186202500410",
			"18186202500419",
			"18186200000426",
			"18186202500433",
			"18186200000470",
			"18186200000472",
			"18186200000487",
			"18186201700511",
			"18186200000512",
			"18186200000519",
			"18186200000520",
			"18186200000522",
			"18186200000550",
			"18186200000557",
			"18186200000558",
			"18186202500561",
			"18186202400570",
			"18186200000576",
			"18186202500577",
			"18186200000585",
			"18186200000594",
			"18186200000603",
			"18186201700617",
			"18186202500625",
			"18186200000630",
			"18186200200643",
			"18186200000643",
			"18186200000654",
			"18186200000659",
			"18186202500660",
			"18186202500663",
			"18186200000669",
			"18186200000671",
			"18186200000676",
			"18186200000684",
			"18186200000712",
			"18186202500711",
			"18186200000713",
			"18186202500723",
			"18186200000738",
			"18186200000742",
			"18186200000770",
			"18186200000775",
			"18186200000777",
			"18186200000789",
			"18186200000799",
			"18186200000806",
			"18186200000811",
			"18186200000812",
			"18186200000813",
			"18186200000824",
			"18186200000848",
			"18186201700878",
			"18186200000879",
			"18186200000881",
			"18186200000887",
			"18186202500913",
			"18186200000933",
			"18186200000958",
			"18186200000959",
			"18186202500962",
			"18186200000973",
			"18186200000989",
			"18186201700992",
			"18186200000993",
			"18186201700994",
			"18186200001005",
			"18186200000995",
			"18186200001013",
			"18186202501022",
			"18186202501036",
			"18186200001046",
			"18186200001048",
			"18186202501062",
			"18186200001068",
			"18186200001079",
			"18186202501084",
			"18186200001096",
			"18186202401099",
			"18186200001107",
			"18186200001111",
			"18186200001113",
			"18186200001132",
			"18186202501134",
			"18186200001146",
			"18186200001150",
			"18186201501151",
			"18186200001151",
			"18186202501158",
			"18186200001159",
			"18186200001161",
			"18186200001169",
			"18186200001171",
			"18186200001172",
			"18186202501189",
			"18186202501194",
			"18186200001219",
			"18186202501225",
			"18186200001241",
			"18186200001243",
			"18186200001244",
			"18186200001245",
			"18186200001255",
			"18186202501263",
			"18186202501268",
			"18186200001269",
			"18186200001300",
			"18186200001302",
			"18186200001303",
			"18186200001304",
			"18186200001309",
			"18186200001312",
			"18186200001318",
			"18186202501316",
			"18186200001356",
			"18186202501323",
			"18186200001400",
			"18186202501350",
			"18186200001382",
			"18186200001383",
			"18186200001469",
			"18186202501394",
			"18186200001397",
			"18186202501398",
			"18186201701406",
			"18186200001410",
			"18186202501413",
			"18186200001418",
			"18186200001420",
			"18186200001460",
			"18186200001462",
			"18186200001467",
			"18186202501468",
			"18186200001471",
			"18186200001473",
			"18186200001475",
			"18186202501484",
			"18186202501492",
			"18186202501494",
			"18186200001495",
			"18186202501503",
			"18186200001505",
			"18186202501507",
			"18186200001512",
			"18186200001513",
			"18186200001515",
			"18186202501521",
			"18186200001525",
			"18186200001528",
			"18186200001531",
			"18186200001542",
			"18186200001552",
			"18186200001554",
			"18186200001555",
			"18186202501562",
			"18186200001564",
			"18186200001568",
			"18186200001572",
			"18186200001581",
			// "18186200001583",
			"18186200001584",
		},
	})

	if ok := assert.NoError(t, err); !ok {
		t.FailNow()
	}

	config := app.GetEventsConfig{
		FifaClient:  &go_fifa.Client{},
		QueueClient: &queue.Client{Queue: &TestQueue{}},
		DatabaseClient: &database.Client{Database: &TestDB{
			GetItemFn: func(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
				return &dynamodb.GetItemOutput{
					Item: item,
				}, nil
			},
		}},
		WebhookURL: s.URL,
	}
	event := events.SQSMessage{
		MessageAttributes: map[string]events.SQSMessageAttribute{
			"CompetitionId": {
				StringValue: aws.String("17"),
			},
			"SeasonId": {
				StringValue: aws.String("255711"),
			},
			"StageId": {
				StringValue: aws.String("285063"),
			},
			"MatchId": {
				StringValue: aws.String("400235456"),
			},
			"HomeTeamName": {
				StringValue: aws.String("Iran"),
			},
			"AwayTeamName": {
				StringValue: aws.String("United States"),
			},
			"HomeTeamAbbrev": {
				StringValue: aws.String("IRN"),
			},
			"AwayTeamAbbrev": {
				StringValue: aws.String("USA"),
			},
			"LastEvent": {
				StringValue: aws.String("0"),
			},
		},
	}
	err = app.GetEvents(context.TODO(), &config, event)
	if err != nil {
		t.Error(err)
	}
}
